{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  console.log(window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight);\n  useEffect(() => {\n    function handleScroll() {\n      if (window.innerHeight + document.documentElement.scrollTop === document.scrollingElement.scrollHeight) {\n        callback();\n      } // if (\n      //   window.innerHeight + document.documentElement.scrollTop ===\n      //     document.documentElement.offsetHeight\n      // ) {\n      //   setIsFetching(true); \n      //    callback()\n      // }\n      // JUST FOR TEST. ignore this code. START\n      // if (window.scrollTop === -500 ) {\n      //   setIsFetching(true);\n      // }\n      // END\n\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [callback]);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","console","log","window","innerHeight","document","documentElement","scrollTop","offsetHeight","handleScroll","scrollingElement","scrollHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAGFM,EAAAA,OAAO,CAACC,GAAR,CAAaC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACXF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B;AAEEZ,EAAAA,SAAS,CAAC,MAAM;AACd,aAASa,YAAT,GAAwB;AAEtB,UAAIN,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KAA4DF,QAAQ,CAACK,gBAAT,CAA0BC,YAA1F,EAAwG;AACzGb,QAAAA,QAAQ;AACR,OAJuB,CAKtB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACD;;AAEDK,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACA,WAAO,MAAMN,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC,CAAb;AACD,GAzBQ,EAyBP,CAACX,QAAD,CAzBO,CAAT;AA0BA,SAAO,CAACC,UAAD,EAAaC,aAAb,CAAP;AACD,CAjCD;;GAAMH,iB;;AAmCN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n\nconsole.log( window.innerHeight + document.documentElement.scrollTop ===\n  document.documentElement.offsetHeight)\n  useEffect(() => {\n    function handleScroll() {\n     \n      if (window.innerHeight + document.documentElement.scrollTop === document.scrollingElement.scrollHeight) {\n     callback()\n    }\n      // if (\n      //   window.innerHeight + document.documentElement.scrollTop ===\n      //     document.documentElement.offsetHeight\n         \n      // ) {\n      //   setIsFetching(true); \n      //    callback()\n      // }\n\n      // JUST FOR TEST. ignore this code. START\n      // if (window.scrollTop === -500 ) {\n      //   setIsFetching(true);\n\n      // }\n      // END\n    }\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  },[callback]);\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}