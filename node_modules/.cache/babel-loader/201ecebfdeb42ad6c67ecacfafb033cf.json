{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [page, setPage] = useState(1);\n  const conten = document.querySelector(\"#conten\"); // console.log( \n  //   page)\n  // useEffect(()=>{\n  //   setPage(1)\n  // },[callback])\n\n  useEffect(() => {\n    function handleScroll() {\n      // callback()\n      if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight) {\n        setPage(page + 1); // setIsFetching(true)\n      } // JUST FOR TEST. ignore this code. START\n\n\n      if (window.scrollTop === -500) {\n        setIsFetching(true);\n      } // END\n\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [page]);\n  return [page];\n};\n\n_s(useInfiniteScroll, \"Jmaj5TZd2A42MlvSLAw69cK4wN8=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","page","setPage","conten","document","querySelector","handleScroll","window","innerHeight","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAK,CAACM,IAAD,EAAMC,OAAN,IAAeP,QAAQ,CAAC,CAAD,CAA5B;AAEF,QAAMQ,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAb,CAJsC,CAKtC;AACA;AAEE;AACA;AACA;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,aAASU,YAAT,GAAwB;AACtB;AAEA,UACEC,MAAM,CAACC,WAAP,GAAqBJ,QAAQ,CAACK,eAAT,CAAyBC,SAA9C,IAAyDN,QAAQ,CAACK,eAAT,CAAyBE,YADpF,EAGE;AACAT,QAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP,CADA,CAEA;AACD,OATqB,CAWtB;;;AACA,UAAIM,MAAM,CAACG,SAAP,KAAqB,CAAC,GAA1B,EAAgC;AAC9BV,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAdqB,CAetB;;AACD;;AAEDO,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCN,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCP,YAArC,CAAb;AACD,GArBQ,EAqBP,CAACL,IAAD,CArBO,CAAT;AAsBA,SAAO,CAACA,IAAD,CAAP;AACD,CAlCD;;GAAMJ,iB;;AAoCN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n  const[page,setPage]=useState(1)\n\nconst conten=document.querySelector(\"#conten\")\n// console.log( \n//   page)\n\n  // useEffect(()=>{\n  //   setPage(1)\n  // },[callback])\n  useEffect(() => {\n    function handleScroll() {\n      // callback()\n     \n      if (\n        window.innerHeight + document.documentElement.scrollTop>=document.documentElement.offsetHeight\n         \n      ) {\n        setPage(page+1)\n        // setIsFetching(true)\n      }\n\n      // JUST FOR TEST. ignore this code. START\n      if (window.scrollTop === -500 ) {\n        setIsFetching(true)\n      }\n      // END\n    }\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  },[page]);\n  return [page];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}