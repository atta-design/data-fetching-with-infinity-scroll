{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  console.log(document.documentElement.offsetHeight);\n  useEffect(() => {\n    function handleScroll() {\n      callback(); // if (\n      //   window.innerHeight + document.documentElement.scrollTop ===\n      //     document.documentElement.offsetHeight\n      // ) {\n      //   setIsFetching(true); \n      //    callback()\n      // }\n      // JUST FOR TEST. ignore this code. START\n      // if (window.scrollTop === -500 ) {\n      //   setIsFetching(true);\n      // }\n      // END\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [callback]);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","console","log","document","documentElement","offsetHeight","handleScroll","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAGFM,EAAAA,OAAO,CAACC,GAAR,CACEC,QAAQ,CAACC,eAAT,CAAyBC,YAD3B;AAEET,EAAAA,SAAS,CAAC,MAAM;AACd,aAASU,YAAT,GAAwB;AACtBR,MAAAA,QAAQ,GADc,CAGtB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACD;;AAEDS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAb;AACD,GAvBQ,EAuBP,CAACR,QAAD,CAvBO,CAAT;AAwBA,SAAO,CAACC,UAAD,EAAaC,aAAb,CAAP;AACD,CA/BD;;GAAMH,iB;;AAiCN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n\nconsole.log( \n  document.documentElement.offsetHeight)\n  useEffect(() => {\n    function handleScroll() {\n      callback()\n     \n      // if (\n      //   window.innerHeight + document.documentElement.scrollTop ===\n      //     document.documentElement.offsetHeight\n         \n      // ) {\n      //   setIsFetching(true); \n      //    callback()\n      // }\n\n      // JUST FOR TEST. ignore this code. START\n      // if (window.scrollTop === -500 ) {\n      //   setIsFetching(true);\n\n      // }\n      // END\n    }\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  },[callback]);\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}