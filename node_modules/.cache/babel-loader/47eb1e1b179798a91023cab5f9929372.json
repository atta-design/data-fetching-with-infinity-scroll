{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const conten = document.querySelector(\"#conten\");\n  console.log();\n  useEffect(() => {\n    function handleScroll() {\n      // callback()\n      if (window.innerHeight + window.scrollY >= conten.innerHeight) {\n        setIsFetching(true);\n        callback();\n      } // JUST FOR TEST. ignore this code. START\n\n\n      if (window.scrollTop === -500) {\n        setIsFetching(true);\n      } // END\n\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [callback]);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","conten","document","querySelector","console","log","handleScroll","window","innerHeight","scrollY","scrollTop","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAEF,QAAMM,MAAM,GAACC,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR;AAGET,EAAAA,SAAS,CAAC,MAAM;AACd,aAASU,YAAT,GAAwB;AACtB;AAEA,UACEC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACE,OAA5B,IACER,MAAM,CAACO,WAFX,EAIE;AACAR,QAAAA,aAAa,CAAC,IAAD,CAAb;AACCF,QAAAA,QAAQ;AACV,OAVqB,CAYtB;;;AACA,UAAIS,MAAM,CAACG,SAAP,KAAqB,CAAC,GAA1B,EAAgC;AAC9BV,QAAAA,aAAa,CAAC,IAAD,CAAb;AAED,OAhBqB,CAiBtB;;AACD;;AAEDO,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCL,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCN,YAArC,CAAb;AACD,GAvBQ,EAuBP,CAACR,QAAD,CAvBO,CAAT;AAwBA,SAAO,CAACC,UAAD,EAAaC,aAAb,CAAP;AACD,CAhCD;;GAAMH,iB;;AAkCN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\nconst conten=document.querySelector(\"#conten\")\nconsole.log( \n  \n          )\n  useEffect(() => {\n    function handleScroll() {\n      // callback()\n     \n      if (\n        window.innerHeight + window.scrollY >=\n          conten.innerHeight\n         \n      ) {\n        setIsFetching(true); \n         callback()\n      }\n\n      // JUST FOR TEST. ignore this code. START\n      if (window.scrollTop === -500 ) {\n        setIsFetching(true);\n\n      }\n      // END\n    }\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  },[callback]);\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}