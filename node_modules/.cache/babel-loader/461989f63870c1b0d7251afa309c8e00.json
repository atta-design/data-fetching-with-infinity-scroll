{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    function handleScroll() {\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        setIsFetching(true);\n        console.log('sa');\n      } // JUST FOR TEST. ignore this code. START\n\n\n      if (window.scrollTop === -500) {\n        setIsFetching(true);\n        console.log('ma');\n      } // END\n\n    }\n\n    console.log(window.innerHeight + document.documentElement.scrollTop);\n    window.addEventListener('scroll', () => x + 1);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","console","log","addEventListener","x","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,aAASK,YAAT,GAAwB;AACtB,UACEC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAF7B,EAIE;AACAP,QAAAA,aAAa,CAAC,IAAD,CAAb;AACHQ,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACE,OARqB,CAUtB;;;AACA,UAAIP,MAAM,CAACI,SAAP,KAAqB,CAAC,GAA1B,EAAgC;AAC9BN,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AAED,OAfqB,CAgBtB;;AACD;;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA1D;AACIJ,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkC,MAAIC,CAAC,GAAC,CAAxC;AACA,WAAO,MAAMT,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCX,YAArC,CAAb;AACD,GAtBQ,EAsBN,CAACF,UAAD,CAtBM,CAAT;AAuBA,SAAO,CAACA,UAAD,EAAaC,aAAb,CAAP;AACD,CA3BD;;GAAMH,iB;;AA6BN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    function handleScroll() {\n      if (\n        window.innerHeight + document.documentElement.scrollTop ===\n          document.documentElement.offsetHeight\n\n      ) {\n        setIsFetching(true);\n     console.log('sa')\n      }\n\n      // JUST FOR TEST. ignore this code. START\n      if (window.scrollTop === -500 ) {\n        setIsFetching(true);\n        console.log('ma')\n\n      }\n      // END\n    }\nconsole.log(window.innerHeight + document.documentElement.scrollTop)\n    window.addEventListener('scroll', ()=>x+1);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}