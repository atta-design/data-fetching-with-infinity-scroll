{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    function handleScroll() {\n      console.log(window.innerHeight);\n\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        setIsFetching(true);\n        callback();\n      } // JUST FOR TEST. ignore this code. START\n\n\n      if (window.scrollTop === -500) {\n        setIsFetching(true);\n      } // END\n\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","handleScroll","console","log","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACd,aAASK,YAAT,GAAwB;AAEpBC,MAAAA,OAAO,CAACC,GAAR,CAAaC,MAAM,CAACC,WAApB;;AACF,UACED,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAF7B,EAIE;AACAT,QAAAA,aAAa,CAAC,IAAD,CAAb;AAEAF,QAAAA,QAAQ;AACT,OAXqB,CAatB;;;AACA,UAAIM,MAAM,CAACI,SAAP,KAAqB,CAAC,GAA1B,EAAgC;AAC9BR,QAAAA,aAAa,CAAC,IAAD,CAAb;AAED,OAjBqB,CAkBtB;;AACD;;AAEDI,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,YAAlC;AACA,WAAO,MAAMG,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,YAArC,CAAb;AACD,GAxBQ,CAAT;AAyBA,SAAO,CAACF,UAAD,EAAaC,aAAb,CAAP;AACD,CA/BD;;GAAMH,iB;;AAiCN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n\n\n  useEffect(() => {\n    function handleScroll() {\n\n        console.log( window.innerHeight)\n      if (\n        window.innerHeight + document.documentElement.scrollTop ===\n          document.documentElement.offsetHeight\n         \n      ) {\n        setIsFetching(true); \n      \n        callback()\n      }\n\n      // JUST FOR TEST. ignore this code. START\n      if (window.scrollTop === -500 ) {\n        setIsFetching(true);\n\n      }\n      // END\n    }\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}