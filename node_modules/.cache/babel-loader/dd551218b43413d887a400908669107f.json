{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    function handleScroll() {\n      console.log('atta');\n      callback; //   if (\n      //     window.innerHeight + document.documentElement.scrollTop ===\n      //       document.documentElement.offsetHeight\n      //   ) {\n      //     setIsFetching(true);\n      //  console.log('sa')\n      //   }\n      //   // JUST FOR TEST. ignore this code. START\n      //   if (window.scrollTop === -500 ) {\n      //     setIsFetching(true);\n      //     console.log('ma')\n      //   }\n      // END\n    }\n\n    window.addEventListener('scroll', handleScroll); // return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","handleScroll","console","log","window","addEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACd,aAASK,YAAT,GAAwB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAL,MAAAA,QAAQ,CAFc,CAGxB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACE;AACD;;AAEDM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAtBc,CAuBd;AACD,GAxBQ,EAwBN,CAACF,UAAD,CAxBM,CAAT;AAyBA,SAAO,CAACA,UAAD,EAAaC,aAAb,CAAP;AACD,CA/BD;;GAAMH,iB;;AAiCN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n\n\n  useEffect(() => {\n    function handleScroll() {\n      console.log('atta')\n      callback\n    //   if (\n    //     window.innerHeight + document.documentElement.scrollTop ===\n    //       document.documentElement.offsetHeight\n\n    //   ) {\n    //     setIsFetching(true);\n    //  console.log('sa')\n    //   }\n\n    //   // JUST FOR TEST. ignore this code. START\n    //   if (window.scrollTop === -500 ) {\n    //     setIsFetching(true);\n    //     console.log('ma')\n\n    //   }\n      // END\n    }\n    \n    window.addEventListener('scroll', handleScroll);\n    // return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}