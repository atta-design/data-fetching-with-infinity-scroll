{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  console.log(callback);\n  useEffect(() => {\n    function handleScroll() {\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        setIsFetching(true);\n        console.log('sa');\n      } // JUST FOR TEST. ignore this code. START\n\n\n      if (window.scrollTop === -500) {\n        setIsFetching(true);\n        console.log('ma');\n      } // END\n\n    }\n\n    console.log(window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight);\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"4bYCuTcVzOH+CK5eDgTTf7d6i94=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/Lenovo/Downloads/issues-page/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","console","log","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAGC,QAAQ,IAAI;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AACFM,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACEF,EAAAA,SAAS,CAAC,MAAM;AACd,aAASO,YAAT,GAAwB;AACtB,UACEC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAF7B,EAIE;AACAT,QAAAA,aAAa,CAAC,IAAD,CAAb;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACE,OARqB,CAUtB;;;AACA,UAAIE,MAAM,CAACI,SAAP,KAAqB,CAAC,GAA1B,EAAgC;AAC9BR,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AAED,OAfqB,CAgBtB;;AACD;;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAcE,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACZF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B;AAEIL,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAb;AACD,GAvBQ,EAuBN,CAACJ,UAAD,CAvBM,CAAT;AAwBA,SAAO,CAACA,UAAD,EAAaC,aAAb,CAAP;AACD,CA5BD;;GAAMH,iB;;AA8BN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\nconsole.log(callback)\n  useEffect(() => {\n    function handleScroll() {\n      if (\n        window.innerHeight + document.documentElement.scrollTop ===\n          document.documentElement.offsetHeight\n\n      ) {\n        setIsFetching(true);\n     console.log('sa')\n      }\n\n      // JUST FOR TEST. ignore this code. START\n      if (window.scrollTop === -500 ) {\n        setIsFetching(true);\n        console.log('ma')\n\n      }\n      // END\n    }\nconsole.log(  window.innerHeight + document.documentElement.scrollTop ===\n  document.documentElement.offsetHeight)\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [isFetching]);\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}